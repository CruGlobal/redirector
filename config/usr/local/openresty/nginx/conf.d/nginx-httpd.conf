error_log stderr;

# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 5MB of storage holds certificates for
# approximately 500 separate domains.
lua_shared_dict auto_ssl 5m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

    auto_ssl:set("redis", {
        host = os.getenv("STORAGE_REDIS_HOST"),
        port = os.getenv("STORAGE_REDIS_PORT"),
        db = os.getenv("STORAGE_REDIS_DB_INDEX"),
        prefix = "certificates"
    })

    auto_ssl:set("allow_domain", function(domain)
        local environment = os.getenv("ENVIRONMENT")
        if environment ~= "production" then
            -- Do not generate certificates unless production
            return false
        else
            local red = auto_ssl.storage.adapter:get_connection()
            -- Check if redirects hash has a key for the current domain
            local enabled = red:hexists("redirects", domain)
            if enabled == 1 then
                return true
            end
            return false
        end
    end)

    auto_ssl:init()
}

init_worker_by_lua_block {
    auto_ssl:init_worker()
}

access_log /dev/stdout;
error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;

# Internal server running on port 8999 for handling certificate tasks.
server {
    listen 127.0.0.1:8999;

    # Set $environment, required by json_combined log format
    set_by_lua $environment 'return os.getenv("ENVIRONMENT") or "development"';

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
}

# HTTP -> HTTPS
server {
    listen 80 default_server;

    set_by_lua $environment 'return os.getenv("ENVIRONMENT") or "development"';
    access_log /dev/stdout json_combined;

    # Endpoint used for performing domain verification with Let's Encrypt.
    location ^~ /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    # redirect all other requests to https
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server
server {
    listen 443 ssl default_server;

    # Set real ip if request forwarded from VPC (vpc-dc2d9fb9) CIDR
    set_real_ip_from 10.16.0.0/16;
    real_ip_header X-Forwarded-For;

    # Set $environment, required by json_combined log format
    set_by_lua $environment 'return os.getenv("ENVIRONMENT") or "development"';
    access_log /dev/stdout json_combined;

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate()
    }

    # Fallback self-signed cert
    ssl_certificate /usr/local/openresty/nginx/cert/cru.self.crt;
    ssl_certificate_key /usr/local/openresty/nginx/cert/cru.self.key;
    ssl_protocols TLSv1.1 TLSv1.2;

    add_header Strict-Transport-Security "max-age=31536000" always;

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    location / {
        rewrite_by_lua_block {
            local red = auto_ssl.storage.adapter:get_connection()
            local redirect, err = red:hget("redirects", ngx.var.host)
            if redirect == ngx.null then
                -- Key has no value, render http 410 error page
                return ngx.exit(410)
            end
            return ngx.redirect("https://" .. redirect)
        }
    }

    # Error Page
    location ~* /(error.html|css/style.css|img/cru.png|favicon.ico) {
        root /home/app/redirector;
    }
}
