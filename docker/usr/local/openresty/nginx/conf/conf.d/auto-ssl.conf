# The "auto_ssl" shared dict should be defined with enough storage space to
# hold your certificate data. 5MB of storage holds certificates for
# approximately 500 separate domains.
lua_shared_dict auto_ssl 5m;

# The "auto_ssl" shared dict is used to temporarily store various settings
# like the secret used by the hook server on port 8999. Do not change or
# omit it.
lua_shared_dict auto_ssl_settings 64k;

# Initial setup tasks.
init_by_lua_block {
    auto_ssl = (require "resty.auto-ssl").new()

    auto_ssl:set("storage_adapter", "resty.auto-ssl.storage_adapters.redis")

    auto_ssl:set("redis", {
        host = os.getenv("STORAGE_REDIS_HOST"),
        port = os.getenv("STORAGE_REDIS_PORT"),
        db = os.getenv("STORAGE_REDIS_DB_INDEX"),
        prefix = "certificates"
    })

    auto_ssl:set("allow_domain", function(domain)
        local environment = os.getenv("ENVIRONMENT")
        if environment ~= "production" then
            -- Do not generate certificates unless production
            return false
        else
            -- Check if redirects hash has a key for the current domain
            local red = auto_ssl.storage.adapter:get_connection()
            local enabled = red:hexists("redirects", domain)
            if enabled == 1 then
                return true
            end
            return false
        end
    end)

    auto_ssl:init()
}

init_worker_by_lua_block {
    auto_ssl:init_worker()
}

# Internal server running on port 8999 for handling certificate tasks.
server {
    listen 127.0.0.1:8999;

    # Increase the body buffer size, to ensure the internal POSTs can always
    # parse the full POST contents into memory.
    client_body_buffer_size 128k;
    client_max_body_size 128k;

    location / {
      content_by_lua_block {
        auto_ssl:hook_server()
      }
    }
}
