error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;

# HTTP -> HTTPS
server {
    listen 80 default_server;

    # Endpoint used for performing domain verification with Let's Encrypt.
    location ^~ /.well-known/acme-challenge/ {
      content_by_lua_block {
        auto_ssl:challenge_server()
      }
    }

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    # redirect all other requests to https
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS Server
server {
    listen 443 ssl default_server;

    # Dynamic handler for issuing or returning certs for SNI domains.
    ssl_certificate_by_lua_block {
        auto_ssl:ssl_certificate();
    }

    # nginx requires cert for startup, we provide self-siged cert for fallback
    ssl_certificate /usr/local/openresty/nginx/conf/server.crt;
    ssl_certificate_key /usr/local/openresty/nginx/conf/server.key;

    # Note: this must comply with PCI rules, since some wordpress sites handle CC transactions
    ssl_protocols TLSv1.2 TLSv1.3;

    add_header Strict-Transport-Security "max-age=31536000" always;

    # load balancer health check
    location /.ping {
        return 200 "pong";
    }

    location / {
        rewrite_by_lua_block {
            local resty_url = require 'resty.url'
            local red = auto_ssl.storage.adapter:get_connection()
            local redirect, err = red:hget("redirects", ngx.var.host)
            if redirect == ngx.null then
                -- Key has no value, render http 410 error page
                return ngx.exit(410)
            end

            -- Build full URL, then parse path and replace occurrences of :PATH in redirect
            local url = string.lower(ngx.var.scheme .. "://" .. ngx.var.host .. ngx.var.uri)
            local url_parts = resty_url.parse(url)
            local path = url_parts.path ~= nil and url_parts.path or ""
            redirect = redirect:gsub(":PATH", path)
            redirect = resty_url.normalize("https://" .. redirect)

            -- Return normalized redirect URL, enforcing https
            return ngx.redirect(redirect)
        }
    }

    # Error Page
    location ~* /(error.html|css/style.css|img/cru.png|favicon.ico) {
        root /usr/local/openresty/nginx/html;
    }
}
