# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Ideally you want one worker process per core.
# ECS stage instances have 2 cores, prod instances have 8 cores.
worker_processes auto;

error_log  logs/error.log error;
pid        logs/nginx.pid;

events {
    worker_connections  1024;

    # epoll is more efficient than the default poll (http://nginx.org/en/docs/events.html)
    use epoll;

    # Accept as many connections as possible, after nginx gets notification about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;
}

include env.conf;

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Without explicitly setting our own DNS server as the resolver, nginx can't resolve internal dns
    # entries on AWS.
    resolver 10.16.2.22 10.16.3.22 ipv6=off;

    # Set real ip if request forwarded from VPC (vpc-dc2d9fb9) CIDR
    set_real_ip_from 10.16.0.0/16;
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Log in JSON Format and exclude Health Checks
    log_format json_main escape=json
    '{'
        '"timestamp": "$time_iso8601",'
        '"remote_addr": "$remote_addr",'
        '"body_bytes_sent": $body_bytes_sent,'
        '"request_time": $request_time,'
        '"response_status": $status,'
        '"request": "$request",'
        '"request_method": "$request_method",'
        '"host": "$host",'
        '"http_x_forwarded_for": "$http_x_forwarded_for",'
        '"http_referrer": "$http_referer",'
        '"http_user_agent": "$http_user_agent",'
        '"http_version": "$server_protocol",'
        '"location":"$sent_http_location",'
        '"amzn_trace_id":"$http_x_amzn_trace_id"'
   '}';

    map $http_user_agent $exclude_healthcheck {
        "ELB-HealthChecker/2.0" 0;
        default 1;
    }

    access_log logs/access.log json_main if=$exclude_healthcheck;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    # Disables emitting nginx version on error pages and in the “Server” response header field.
    server_tokens off;

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    sendfile on;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames. This is useful for prepending headers before calling sendfile,
    # or for throughput optimization.
    tcp_nopush on;

    # don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 30;

    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;

    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 30;

    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 10;

    include conf.d/*.conf;
}
